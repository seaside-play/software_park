// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR LayerRef::LayerRef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LayerRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerRefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerRefDefaultTypeInternal() {}
  union {
    LayerRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerRefDefaultTypeInternal _LayerRef_default_instance_;
PROTOBUF_CONSTEXPR Color::Color(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.r_)*/0u
  , /*decltype(_impl_.g_)*/0u
  , /*decltype(_impl_.b_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorDefaultTypeInternal _Color_default_instance_;
PROTOBUF_CONSTEXPR EntryColor::EntryColor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntryColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntryColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntryColorDefaultTypeInternal() {}
  union {
    EntryColor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntryColorDefaultTypeInternal _EntryColor_default_instance_;
PROTOBUF_CONSTEXPR DictionaryColor::DictionaryColor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entry_color_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DictionaryColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DictionaryColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DictionaryColorDefaultTypeInternal() {}
  union {
    DictionaryColor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DictionaryColorDefaultTypeInternal _DictionaryColor_default_instance_;
PROTOBUF_CONSTEXPR Content::Content(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.layer_ref_)*/{}
  , /*decltype(_impl_.dictionary_color_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContentDefaultTypeInternal() {}
  union {
    Content _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContentDefaultTypeInternal _Content_default_instance_;
PROTOBUF_CONSTEXPR Property::Property(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unit_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PropertyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyDefaultTypeInternal() {}
  union {
    Property _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyDefaultTypeInternal _Property_default_instance_;
PROTOBUF_CONSTEXPR General::General(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.property_)*/nullptr
  , /*decltype(_impl_.general_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GeneralDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeneralDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeneralDefaultTypeInternal() {}
  union {
    General _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeneralDefaultTypeInternal _General_default_instance_;
PROTOBUF_CONSTEXPR Spec::Spec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.general_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpecDefaultTypeInternal() {}
  union {
    Spec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpecDefaultTypeInternal _Spec_default_instance_;
PROTOBUF_CONSTEXPR CadHeader::CadHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spec_)*/{}
  , /*decltype(_impl_.units_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CadHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CadHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CadHeaderDefaultTypeInternal() {}
  union {
    CadHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CadHeaderDefaultTypeInternal _CadHeader_default_instance_;
PROTOBUF_CONSTEXPR Layer::Layer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.polarity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.side_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.layerfunction_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerDefaultTypeInternal() {}
  union {
    Layer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerDefaultTypeInternal _Layer_default_instance_;
PROTOBUF_CONSTEXPR SpecRef::SpecRef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpecRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpecRefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpecRefDefaultTypeInternal() {}
  union {
    SpecRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpecRefDefaultTypeInternal _SpecRef_default_instance_;
PROTOBUF_CONSTEXPR StackupLayer::StackupLayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.layerorgroupref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_ref_)*/nullptr
  , /*decltype(_impl_.tominus_)*/0
  , /*decltype(_impl_.toplus_)*/0
  , /*decltype(_impl_.sequence_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StackupLayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StackupLayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StackupLayerDefaultTypeInternal() {}
  union {
    StackupLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StackupLayerDefaultTypeInternal _StackupLayer_default_instance_;
PROTOBUF_CONSTEXPR StackupGroup::StackupGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stackup_layer_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tominus_)*/0
  , /*decltype(_impl_.toplus_)*/0
  , /*decltype(_impl_.overalltickness_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StackupGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StackupGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StackupGroupDefaultTypeInternal() {}
  union {
    StackupGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StackupGroupDefaultTypeInternal _StackupGroup_default_instance_;
PROTOBUF_CONSTEXPR Stackup::Stackup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.wheremeasured_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stack_group_)*/nullptr
  , /*decltype(_impl_.tominus_)*/0
  , /*decltype(_impl_.toplus_)*/0
  , /*decltype(_impl_.overalltickness_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StackupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StackupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StackupDefaultTypeInternal() {}
  union {
    Stackup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StackupDefaultTypeInternal _Stackup_default_instance_;
PROTOBUF_CONSTEXPR CadData::CadData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.layer_)*/{}
  , /*decltype(_impl_.stack_up_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CadDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CadDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CadDataDefaultTypeInternal() {}
  union {
    CadData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CadDataDefaultTypeInternal _CadData_default_instance_;
PROTOBUF_CONSTEXPR Ecad::Ecad(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cad_header_)*/nullptr
  , /*decltype(_impl_.cad_data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EcadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EcadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EcadDefaultTypeInternal() {}
  union {
    Ecad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EcadDefaultTypeInternal _Ecad_default_instance_;
PROTOBUF_CONSTEXPR root::root(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/nullptr
  , /*decltype(_impl_.ecad_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct rootDefaultTypeInternal {
  PROTOBUF_CONSTEXPR rootDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~rootDefaultTypeInternal() {}
  union {
    root _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 rootDefaultTypeInternal _root_default_instance_;
static ::_pb::Metadata file_level_metadata_test_2eproto[17];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_test_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_test_2eproto = nullptr;

const uint32_t TableStruct_test_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LayerRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LayerRef, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Color, _impl_.r_),
  PROTOBUF_FIELD_OFFSET(::Color, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::Color, _impl_.b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EntryColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EntryColor, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::EntryColor, _impl_.color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DictionaryColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DictionaryColor, _impl_.entry_color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Content, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Content, _impl_.layer_ref_),
  PROTOBUF_FIELD_OFFSET(::Content, _impl_.dictionary_color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Property, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Property, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::Property, _impl_.unit_),
  PROTOBUF_FIELD_OFFSET(::Property, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::General, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::General, _impl_.general_type_),
  PROTOBUF_FIELD_OFFSET(::General, _impl_.property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Spec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Spec, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Spec, _impl_.general_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CadHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CadHeader, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::CadHeader, _impl_.spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Layer, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Layer, _impl_.polarity_),
  PROTOBUF_FIELD_OFFSET(::Layer, _impl_.side_),
  PROTOBUF_FIELD_OFFSET(::Layer, _impl_.layerfunction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpecRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SpecRef, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StackupLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StackupLayer, _impl_.tominus_),
  PROTOBUF_FIELD_OFFSET(::StackupLayer, _impl_.toplus_),
  PROTOBUF_FIELD_OFFSET(::StackupLayer, _impl_.sequence_),
  PROTOBUF_FIELD_OFFSET(::StackupLayer, _impl_.layerorgroupref_),
  PROTOBUF_FIELD_OFFSET(::StackupLayer, _impl_.spec_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StackupGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StackupGroup, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::StackupGroup, _impl_.tominus_),
  PROTOBUF_FIELD_OFFSET(::StackupGroup, _impl_.toplus_),
  PROTOBUF_FIELD_OFFSET(::StackupGroup, _impl_.overalltickness_),
  PROTOBUF_FIELD_OFFSET(::StackupGroup, _impl_.stackup_layer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Stackup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Stackup, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Stackup, _impl_.wheremeasured_),
  PROTOBUF_FIELD_OFFSET(::Stackup, _impl_.tominus_),
  PROTOBUF_FIELD_OFFSET(::Stackup, _impl_.toplus_),
  PROTOBUF_FIELD_OFFSET(::Stackup, _impl_.overalltickness_),
  PROTOBUF_FIELD_OFFSET(::Stackup, _impl_.stack_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CadData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CadData, _impl_.layer_),
  PROTOBUF_FIELD_OFFSET(::CadData, _impl_.stack_up_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Ecad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Ecad, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Ecad, _impl_.cad_header_),
  PROTOBUF_FIELD_OFFSET(::Ecad, _impl_.cad_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::root, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::root, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::root, _impl_.ecad_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LayerRef)},
  { 7, -1, -1, sizeof(::Color)},
  { 16, -1, -1, sizeof(::EntryColor)},
  { 24, -1, -1, sizeof(::DictionaryColor)},
  { 31, -1, -1, sizeof(::Content)},
  { 39, -1, -1, sizeof(::Property)},
  { 48, -1, -1, sizeof(::General)},
  { 56, -1, -1, sizeof(::Spec)},
  { 64, -1, -1, sizeof(::CadHeader)},
  { 72, -1, -1, sizeof(::Layer)},
  { 82, -1, -1, sizeof(::SpecRef)},
  { 89, -1, -1, sizeof(::StackupLayer)},
  { 100, -1, -1, sizeof(::StackupGroup)},
  { 111, -1, -1, sizeof(::Stackup)},
  { 123, -1, -1, sizeof(::CadData)},
  { 131, -1, -1, sizeof(::Ecad)},
  { 140, -1, -1, sizeof(::root)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_LayerRef_default_instance_._instance,
  &::_Color_default_instance_._instance,
  &::_EntryColor_default_instance_._instance,
  &::_DictionaryColor_default_instance_._instance,
  &::_Content_default_instance_._instance,
  &::_Property_default_instance_._instance,
  &::_General_default_instance_._instance,
  &::_Spec_default_instance_._instance,
  &::_CadHeader_default_instance_._instance,
  &::_Layer_default_instance_._instance,
  &::_SpecRef_default_instance_._instance,
  &::_StackupLayer_default_instance_._instance,
  &::_StackupGroup_default_instance_._instance,
  &::_Stackup_default_instance_._instance,
  &::_CadData_default_instance_._instance,
  &::_Ecad_default_instance_._instance,
  &::_root_default_instance_._instance,
};

const char descriptor_table_protodef_test_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntest.proto\"\030\n\010LayerRef\022\014\n\004name\030\001 \001(\t\"("
  "\n\005Color\022\t\n\001r\030\001 \001(\r\022\t\n\001g\030\002 \001(\r\022\t\n\001b\030\003 \001(\r"
  "\"/\n\nEntryColor\022\n\n\002id\030\001 \001(\t\022\025\n\005color\030\002 \001("
  "\0132\006.Color\"3\n\017DictionaryColor\022 \n\013entry_co"
  "lor\030\001 \003(\0132\013.EntryColor\"S\n\007Content\022\034\n\tlay"
  "er_ref\030\001 \003(\0132\t.LayerRef\022*\n\020dictionary_co"
  "lor\030\002 \001(\0132\020.DictionaryColor\"5\n\010Property\022"
  "\014\n\004text\030\001 \001(\t\022\014\n\004unit\030\002 \001(\t\022\r\n\005value\030\003 \001"
  "(\001\"J\n\007General\022\"\n\014general_type\030\001 \001(\0162\014.Ge"
  "neralType\022\033\n\010property\030\002 \001(\0132\t.Property\"/"
  "\n\004Spec\022\014\n\004name\030\001 \001(\t\022\031\n\007general\030\002 \003(\0132\010."
  "General\"7\n\tCadHeader\022\025\n\005units\030\001 \001(\0162\006.Un"
  "its\022\023\n\004spec\030\002 \003(\0132\005.Spec\"L\n\005Layer\022\014\n\004nam"
  "e\030\001 \001(\t\022\020\n\010polarity\030\002 \001(\t\022\014\n\004side\030\003 \001(\t\022"
  "\025\n\rlayerFunction\030\004 \001(\t\"\025\n\007SpecRef\022\n\n\002id\030"
  "\001 \001(\t\"v\n\014StackupLayer\022\017\n\007toMinus\030\001 \001(\001\022\016"
  "\n\006toPlus\030\002 \001(\001\022\020\n\010sequence\030\003 \001(\005\022\027\n\017laye"
  "rOrGroupRef\030\004 \001(\t\022\032\n\010spec_ref\030\005 \001(\0132\010.Sp"
  "ecRef\"|\n\014StackupGroup\022\014\n\004name\030\001 \001(\t\022\017\n\007t"
  "oMinus\030\002 \001(\001\022\016\n\006toPlus\030\003 \001(\001\022\027\n\017overallT"
  "ickness\030\004 \001(\001\022$\n\rstackup_layer\030\005 \003(\0132\r.S"
  "tackupLayer\"\214\001\n\007Stackup\022\014\n\004name\030\001 \001(\t\022\025\n"
  "\rwhereMeasured\030\002 \001(\t\022\017\n\007toMinus\030\003 \001(\001\022\016\n"
  "\006toPlus\030\004 \001(\001\022\027\n\017overallTickness\030\005 \001(\001\022\""
  "\n\013stack_group\030\006 \001(\0132\r.StackupGroup\"<\n\007Ca"
  "dData\022\025\n\005layer\030\001 \003(\0132\006.Layer\022\032\n\010stack_up"
  "\030\002 \001(\0132\010.Stackup\"P\n\004Ecad\022\014\n\004name\030\001 \001(\t\022\036"
  "\n\ncad_header\030\002 \001(\0132\n.CadHeader\022\032\n\010cad_da"
  "ta\030\003 \001(\0132\010.CadData\"6\n\004root\022\031\n\007content\030\001 "
  "\001(\0132\010.Content\022\023\n\004ecad\030\002 \001(\0132\005.Ecad*.\n\013Ge"
  "neralType\022\014\n\010MATERIAL\020\000\022\021\n\rCONDUCITIVITY"
  "\020\001*\023\n\005Units\022\n\n\006MICRON\020\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_test_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_test_2eproto = {
    false, false, 1271, descriptor_table_protodef_test_2eproto,
    "test.proto",
    &descriptor_table_test_2eproto_once, nullptr, 0, 17,
    schemas, file_default_instances, TableStruct_test_2eproto::offsets,
    file_level_metadata_test_2eproto, file_level_enum_descriptors_test_2eproto,
    file_level_service_descriptors_test_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_test_2eproto_getter() {
  return &descriptor_table_test_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_test_2eproto(&descriptor_table_test_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeneralType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_test_2eproto);
  return file_level_enum_descriptors_test_2eproto[0];
}
bool GeneralType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Units_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_test_2eproto);
  return file_level_enum_descriptors_test_2eproto[1];
}
bool Units_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LayerRef::_Internal {
 public:
};

LayerRef::LayerRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LayerRef)
}
LayerRef::LayerRef(const LayerRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LayerRef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:LayerRef)
}

inline void LayerRef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LayerRef::~LayerRef() {
  // @@protoc_insertion_point(destructor:LayerRef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void LayerRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayerRef::Clear() {
// @@protoc_insertion_point(message_clear_start:LayerRef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayerRef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "LayerRef.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerRef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LayerRef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LayerRef.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LayerRef)
  return target;
}

size_t LayerRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LayerRef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayerRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LayerRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayerRef::GetClassData() const { return &_class_data_; }


void LayerRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LayerRef*>(&to_msg);
  auto& from = static_cast<const LayerRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LayerRef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayerRef::CopyFrom(const LayerRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LayerRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerRef::IsInitialized() const {
  return true;
}

void LayerRef::InternalSwap(LayerRef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[0]);
}

// ===================================================================

class Color::_Internal {
 public:
};

Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Color* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.b_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.r_, &from._impl_.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.b_) -
    reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.b_));
  // @@protoc_insertion_point(copy_constructor:Color)
}

inline void Color::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){0u}
    , decltype(_impl_.g_){0u}
    , decltype(_impl_.b_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:Color)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Color::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:Color)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.b_) -
      reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.b_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Color::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Color)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 r = 1;
  if (this->_internal_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_r(), target);
  }

  // uint32 g = 2;
  if (this->_internal_g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_g(), target);
  }

  // uint32 b = 3;
  if (this->_internal_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Color)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 r = 1;
  if (this->_internal_r() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_r());
  }

  // uint32 g = 2;
  if (this->_internal_g() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_g());
  }

  // uint32 b = 3;
  if (this->_internal_b() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_b());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Color::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Color::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Color::GetClassData() const { return &_class_data_; }


void Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Color*>(&to_msg);
  auto& from = static_cast<const Color&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Color)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_r() != 0) {
    _this->_internal_set_r(from._internal_r());
  }
  if (from._internal_g() != 0) {
    _this->_internal_set_g(from._internal_g());
  }
  if (from._internal_b() != 0) {
    _this->_internal_set_b(from._internal_b());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, _impl_.b_)
      + sizeof(Color::_impl_.b_)
      - PROTOBUF_FIELD_OFFSET(Color, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[1]);
}

// ===================================================================

class EntryColor::_Internal {
 public:
  static const ::Color& color(const EntryColor* msg);
};

const ::Color&
EntryColor::_Internal::color(const EntryColor* msg) {
  return *msg->_impl_.color_;
}
EntryColor::EntryColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EntryColor)
}
EntryColor::EntryColor(const EntryColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntryColor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.color_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::Color(*from._impl_.color_);
  }
  // @@protoc_insertion_point(copy_constructor:EntryColor)
}

inline void EntryColor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.color_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EntryColor::~EntryColor() {
  // @@protoc_insertion_point(destructor:EntryColor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntryColor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.color_;
}

void EntryColor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntryColor::Clear() {
// @@protoc_insertion_point(message_clear_start:EntryColor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntryColor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EntryColor.id"));
        } else
          goto handle_unusual;
        continue;
      // .Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntryColor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EntryColor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EntryColor.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .Color color = 2;
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EntryColor)
  return target;
}

size_t EntryColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EntryColor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .Color color = 2;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntryColor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntryColor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntryColor::GetClassData() const { return &_class_data_; }


void EntryColor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntryColor*>(&to_msg);
  auto& from = static_cast<const EntryColor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EntryColor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_color()) {
    _this->_internal_mutable_color()->::Color::MergeFrom(
        from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntryColor::CopyFrom(const EntryColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EntryColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryColor::IsInitialized() const {
  return true;
}

void EntryColor::InternalSwap(EntryColor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.color_, other->_impl_.color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntryColor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[2]);
}

// ===================================================================

class DictionaryColor::_Internal {
 public:
};

DictionaryColor::DictionaryColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DictionaryColor)
}
DictionaryColor::DictionaryColor(const DictionaryColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DictionaryColor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_color_){from._impl_.entry_color_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DictionaryColor)
}

inline void DictionaryColor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_color_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DictionaryColor::~DictionaryColor() {
  // @@protoc_insertion_point(destructor:DictionaryColor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DictionaryColor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entry_color_.~RepeatedPtrField();
}

void DictionaryColor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DictionaryColor::Clear() {
// @@protoc_insertion_point(message_clear_start:DictionaryColor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_color_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DictionaryColor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .EntryColor entry_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry_color(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DictionaryColor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DictionaryColor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .EntryColor entry_color = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_color_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry_color(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DictionaryColor)
  return target;
}

size_t DictionaryColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DictionaryColor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EntryColor entry_color = 1;
  total_size += 1UL * this->_internal_entry_color_size();
  for (const auto& msg : this->_impl_.entry_color_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DictionaryColor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DictionaryColor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DictionaryColor::GetClassData() const { return &_class_data_; }


void DictionaryColor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DictionaryColor*>(&to_msg);
  auto& from = static_cast<const DictionaryColor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DictionaryColor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entry_color_.MergeFrom(from._impl_.entry_color_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DictionaryColor::CopyFrom(const DictionaryColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DictionaryColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictionaryColor::IsInitialized() const {
  return true;
}

void DictionaryColor::InternalSwap(DictionaryColor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entry_color_.InternalSwap(&other->_impl_.entry_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DictionaryColor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[3]);
}

// ===================================================================

class Content::_Internal {
 public:
  static const ::DictionaryColor& dictionary_color(const Content* msg);
};

const ::DictionaryColor&
Content::_Internal::dictionary_color(const Content* msg) {
  return *msg->_impl_.dictionary_color_;
}
Content::Content(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Content)
}
Content::Content(const Content& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Content* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.layer_ref_){from._impl_.layer_ref_}
    , decltype(_impl_.dictionary_color_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dictionary_color()) {
    _this->_impl_.dictionary_color_ = new ::DictionaryColor(*from._impl_.dictionary_color_);
  }
  // @@protoc_insertion_point(copy_constructor:Content)
}

inline void Content::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.layer_ref_){arena}
    , decltype(_impl_.dictionary_color_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Content::~Content() {
  // @@protoc_insertion_point(destructor:Content)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Content::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layer_ref_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.dictionary_color_;
}

void Content::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Content::Clear() {
// @@protoc_insertion_point(message_clear_start:Content)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layer_ref_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.dictionary_color_ != nullptr) {
    delete _impl_.dictionary_color_;
  }
  _impl_.dictionary_color_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Content::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .LayerRef layer_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layer_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DictionaryColor dictionary_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dictionary_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Content::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Content)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LayerRef layer_ref = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layer_ref_size()); i < n; i++) {
    const auto& repfield = this->_internal_layer_ref(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .DictionaryColor dictionary_color = 2;
  if (this->_internal_has_dictionary_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dictionary_color(this),
        _Internal::dictionary_color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Content)
  return target;
}

size_t Content::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Content)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LayerRef layer_ref = 1;
  total_size += 1UL * this->_internal_layer_ref_size();
  for (const auto& msg : this->_impl_.layer_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DictionaryColor dictionary_color = 2;
  if (this->_internal_has_dictionary_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dictionary_color_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Content::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Content::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Content::GetClassData() const { return &_class_data_; }


void Content::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Content*>(&to_msg);
  auto& from = static_cast<const Content&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Content)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.layer_ref_.MergeFrom(from._impl_.layer_ref_);
  if (from._internal_has_dictionary_color()) {
    _this->_internal_mutable_dictionary_color()->::DictionaryColor::MergeFrom(
        from._internal_dictionary_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Content::CopyFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content::IsInitialized() const {
  return true;
}

void Content::InternalSwap(Content* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.layer_ref_.InternalSwap(&other->_impl_.layer_ref_);
  swap(_impl_.dictionary_color_, other->_impl_.dictionary_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Content::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[4]);
}

// ===================================================================

class Property::_Internal {
 public:
};

Property::Property(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Property)
}
Property::Property(const Property& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Property* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.unit_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unit().empty()) {
    _this->_impl_.unit_.Set(from._internal_unit(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:Property)
}

inline void Property::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.unit_){}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:Property)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Property::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  _impl_.unit_.Destroy();
}

void Property::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Property::Clear() {
// @@protoc_insertion_point(message_clear_start:Property)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.unit_.ClearToEmpty();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Property.text"));
        } else
          goto handle_unusual;
        continue;
      // string unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_unit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Property.unit"));
        } else
          goto handle_unusual;
        continue;
      // double value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Property::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Property)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Property.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // string unit = 2;
  if (!this->_internal_unit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Property.unit");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_unit(), target);
  }

  // double value = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Property)
  return target;
}

size_t Property::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Property)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string unit = 2;
  if (!this->_internal_unit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  // double value = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Property::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Property::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Property::GetClassData() const { return &_class_data_; }


void Property::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Property*>(&to_msg);
  auto& from = static_cast<const Property&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Property)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_unit().empty()) {
    _this->_internal_set_unit(from._internal_unit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Property::CopyFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  return true;
}

void Property::InternalSwap(Property* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unit_, lhs_arena,
      &other->_impl_.unit_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Property::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[5]);
}

// ===================================================================

class General::_Internal {
 public:
  static const ::Property& property(const General* msg);
};

const ::Property&
General::_Internal::property(const General* msg) {
  return *msg->_impl_.property_;
}
General::General(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:General)
}
General::General(const General& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  General* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.property_){nullptr}
    , decltype(_impl_.general_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_property()) {
    _this->_impl_.property_ = new ::Property(*from._impl_.property_);
  }
  _this->_impl_.general_type_ = from._impl_.general_type_;
  // @@protoc_insertion_point(copy_constructor:General)
}

inline void General::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.property_){nullptr}
    , decltype(_impl_.general_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

General::~General() {
  // @@protoc_insertion_point(destructor:General)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void General::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.property_;
}

void General::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void General::Clear() {
// @@protoc_insertion_point(message_clear_start:General)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.property_ != nullptr) {
    delete _impl_.property_;
  }
  _impl_.property_ = nullptr;
  _impl_.general_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* General::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .GeneralType general_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_general_type(static_cast<::GeneralType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Property property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* General::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:General)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .GeneralType general_type = 1;
  if (this->_internal_general_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_general_type(), target);
  }

  // .Property property = 2;
  if (this->_internal_has_property()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::property(this),
        _Internal::property(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:General)
  return target;
}

size_t General::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:General)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Property property = 2;
  if (this->_internal_has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.property_);
  }

  // .GeneralType general_type = 1;
  if (this->_internal_general_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_general_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData General::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    General::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*General::GetClassData() const { return &_class_data_; }


void General::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<General*>(&to_msg);
  auto& from = static_cast<const General&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:General)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_property()) {
    _this->_internal_mutable_property()->::Property::MergeFrom(
        from._internal_property());
  }
  if (from._internal_general_type() != 0) {
    _this->_internal_set_general_type(from._internal_general_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void General::CopyFrom(const General& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:General)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool General::IsInitialized() const {
  return true;
}

void General::InternalSwap(General* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(General, _impl_.general_type_)
      + sizeof(General::_impl_.general_type_)
      - PROTOBUF_FIELD_OFFSET(General, _impl_.property_)>(
          reinterpret_cast<char*>(&_impl_.property_),
          reinterpret_cast<char*>(&other->_impl_.property_));
}

::PROTOBUF_NAMESPACE_ID::Metadata General::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[6]);
}

// ===================================================================

class Spec::_Internal {
 public:
};

Spec::Spec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Spec)
}
Spec::Spec(const Spec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Spec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.general_){from._impl_.general_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Spec)
}

inline void Spec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.general_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Spec::~Spec() {
  // @@protoc_insertion_point(destructor:Spec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Spec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.general_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Spec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Spec::Clear() {
// @@protoc_insertion_point(message_clear_start:Spec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.general_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Spec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Spec.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .General general = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_general(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Spec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Spec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Spec.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .General general = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_general_size()); i < n; i++) {
    const auto& repfield = this->_internal_general(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Spec)
  return target;
}

size_t Spec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Spec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .General general = 2;
  total_size += 1UL * this->_internal_general_size();
  for (const auto& msg : this->_impl_.general_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Spec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Spec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Spec::GetClassData() const { return &_class_data_; }


void Spec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Spec*>(&to_msg);
  auto& from = static_cast<const Spec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Spec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.general_.MergeFrom(from._impl_.general_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Spec::CopyFrom(const Spec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Spec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spec::IsInitialized() const {
  return true;
}

void Spec::InternalSwap(Spec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.general_.InternalSwap(&other->_impl_.general_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Spec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[7]);
}

// ===================================================================

class CadHeader::_Internal {
 public:
};

CadHeader::CadHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CadHeader)
}
CadHeader::CadHeader(const CadHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CadHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spec_){from._impl_.spec_}
    , decltype(_impl_.units_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.units_ = from._impl_.units_;
  // @@protoc_insertion_point(copy_constructor:CadHeader)
}

inline void CadHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spec_){arena}
    , decltype(_impl_.units_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CadHeader::~CadHeader() {
  // @@protoc_insertion_point(destructor:CadHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CadHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spec_.~RepeatedPtrField();
}

void CadHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CadHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CadHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spec_.Clear();
  _impl_.units_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CadHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Units units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_units(static_cast<::Units>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .Spec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spec(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CadHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CadHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Units units = 1;
  if (this->_internal_units() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_units(), target);
  }

  // repeated .Spec spec = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spec_size()); i < n; i++) {
    const auto& repfield = this->_internal_spec(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CadHeader)
  return target;
}

size_t CadHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CadHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Spec spec = 2;
  total_size += 1UL * this->_internal_spec_size();
  for (const auto& msg : this->_impl_.spec_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Units units = 1;
  if (this->_internal_units() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_units());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CadHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CadHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CadHeader::GetClassData() const { return &_class_data_; }


void CadHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CadHeader*>(&to_msg);
  auto& from = static_cast<const CadHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CadHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.spec_.MergeFrom(from._impl_.spec_);
  if (from._internal_units() != 0) {
    _this->_internal_set_units(from._internal_units());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CadHeader::CopyFrom(const CadHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CadHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CadHeader::IsInitialized() const {
  return true;
}

void CadHeader::InternalSwap(CadHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.spec_.InternalSwap(&other->_impl_.spec_);
  swap(_impl_.units_, other->_impl_.units_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CadHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[8]);
}

// ===================================================================

class Layer::_Internal {
 public:
};

Layer::Layer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Layer)
}
Layer::Layer(const Layer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Layer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.polarity_){}
    , decltype(_impl_.side_){}
    , decltype(_impl_.layerfunction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.polarity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.polarity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_polarity().empty()) {
    _this->_impl_.polarity_.Set(from._internal_polarity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.side_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_side().empty()) {
    _this->_impl_.side_.Set(from._internal_side(), 
      _this->GetArenaForAllocation());
  }
  _impl_.layerfunction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layerfunction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_layerfunction().empty()) {
    _this->_impl_.layerfunction_.Set(from._internal_layerfunction(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Layer)
}

inline void Layer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.polarity_){}
    , decltype(_impl_.side_){}
    , decltype(_impl_.layerfunction_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.polarity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.polarity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.side_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.layerfunction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layerfunction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:Layer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Layer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.polarity_.Destroy();
  _impl_.side_.Destroy();
  _impl_.layerfunction_.Destroy();
}

void Layer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:Layer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.polarity_.ClearToEmpty();
  _impl_.side_.ClearToEmpty();
  _impl_.layerfunction_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Layer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Layer.name"));
        } else
          goto handle_unusual;
        continue;
      // string polarity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_polarity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Layer.polarity"));
        } else
          goto handle_unusual;
        continue;
      // string side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_side();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Layer.side"));
        } else
          goto handle_unusual;
        continue;
      // string layerFunction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_layerfunction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Layer.layerFunction"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Layer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Layer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Layer.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string polarity = 2;
  if (!this->_internal_polarity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_polarity().data(), static_cast<int>(this->_internal_polarity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Layer.polarity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_polarity(), target);
  }

  // string side = 3;
  if (!this->_internal_side().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_side().data(), static_cast<int>(this->_internal_side().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Layer.side");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_side(), target);
  }

  // string layerFunction = 4;
  if (!this->_internal_layerfunction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_layerfunction().data(), static_cast<int>(this->_internal_layerfunction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Layer.layerFunction");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_layerfunction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Layer)
  return target;
}

size_t Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Layer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string polarity = 2;
  if (!this->_internal_polarity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_polarity());
  }

  // string side = 3;
  if (!this->_internal_side().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_side());
  }

  // string layerFunction = 4;
  if (!this->_internal_layerfunction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_layerfunction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Layer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Layer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Layer::GetClassData() const { return &_class_data_; }


void Layer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Layer*>(&to_msg);
  auto& from = static_cast<const Layer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Layer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_polarity().empty()) {
    _this->_internal_set_polarity(from._internal_polarity());
  }
  if (!from._internal_side().empty()) {
    _this->_internal_set_side(from._internal_side());
  }
  if (!from._internal_layerfunction().empty()) {
    _this->_internal_set_layerfunction(from._internal_layerfunction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Layer::CopyFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  return true;
}

void Layer::InternalSwap(Layer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.polarity_, lhs_arena,
      &other->_impl_.polarity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.side_, lhs_arena,
      &other->_impl_.side_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.layerfunction_, lhs_arena,
      &other->_impl_.layerfunction_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Layer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[9]);
}

// ===================================================================

class SpecRef::_Internal {
 public:
};

SpecRef::SpecRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SpecRef)
}
SpecRef::SpecRef(const SpecRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpecRef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SpecRef)
}

inline void SpecRef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpecRef::~SpecRef() {
  // @@protoc_insertion_point(destructor:SpecRef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpecRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void SpecRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpecRef::Clear() {
// @@protoc_insertion_point(message_clear_start:SpecRef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecRef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SpecRef.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpecRef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpecRef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpecRef.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpecRef)
  return target;
}

size_t SpecRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpecRef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpecRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecRef::GetClassData() const { return &_class_data_; }


void SpecRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpecRef*>(&to_msg);
  auto& from = static_cast<const SpecRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SpecRef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecRef::CopyFrom(const SpecRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpecRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecRef::IsInitialized() const {
  return true;
}

void SpecRef::InternalSwap(SpecRef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[10]);
}

// ===================================================================

class StackupLayer::_Internal {
 public:
  static const ::SpecRef& spec_ref(const StackupLayer* msg);
};

const ::SpecRef&
StackupLayer::_Internal::spec_ref(const StackupLayer* msg) {
  return *msg->_impl_.spec_ref_;
}
StackupLayer::StackupLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StackupLayer)
}
StackupLayer::StackupLayer(const StackupLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StackupLayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.layerorgroupref_){}
    , decltype(_impl_.spec_ref_){nullptr}
    , decltype(_impl_.tominus_){}
    , decltype(_impl_.toplus_){}
    , decltype(_impl_.sequence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.layerorgroupref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layerorgroupref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_layerorgroupref().empty()) {
    _this->_impl_.layerorgroupref_.Set(from._internal_layerorgroupref(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spec_ref()) {
    _this->_impl_.spec_ref_ = new ::SpecRef(*from._impl_.spec_ref_);
  }
  ::memcpy(&_impl_.tominus_, &from._impl_.tominus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sequence_) -
    reinterpret_cast<char*>(&_impl_.tominus_)) + sizeof(_impl_.sequence_));
  // @@protoc_insertion_point(copy_constructor:StackupLayer)
}

inline void StackupLayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.layerorgroupref_){}
    , decltype(_impl_.spec_ref_){nullptr}
    , decltype(_impl_.tominus_){0}
    , decltype(_impl_.toplus_){0}
    , decltype(_impl_.sequence_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.layerorgroupref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layerorgroupref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StackupLayer::~StackupLayer() {
  // @@protoc_insertion_point(destructor:StackupLayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StackupLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layerorgroupref_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spec_ref_;
}

void StackupLayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StackupLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:StackupLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layerorgroupref_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ref_ != nullptr) {
    delete _impl_.spec_ref_;
  }
  _impl_.spec_ref_ = nullptr;
  ::memset(&_impl_.tominus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sequence_) -
      reinterpret_cast<char*>(&_impl_.tominus_)) + sizeof(_impl_.sequence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StackupLayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double toMinus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.tominus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double toPlus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.toplus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string layerOrGroupRef = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_layerorgroupref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StackupLayer.layerOrGroupRef"));
        } else
          goto handle_unusual;
        continue;
      // .SpecRef spec_ref = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StackupLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StackupLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double toMinus = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tominus = this->_internal_tominus();
  uint64_t raw_tominus;
  memcpy(&raw_tominus, &tmp_tominus, sizeof(tmp_tominus));
  if (raw_tominus != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_tominus(), target);
  }

  // double toPlus = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_toplus = this->_internal_toplus();
  uint64_t raw_toplus;
  memcpy(&raw_toplus, &tmp_toplus, sizeof(tmp_toplus));
  if (raw_toplus != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_toplus(), target);
  }

  // int32 sequence = 3;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence(), target);
  }

  // string layerOrGroupRef = 4;
  if (!this->_internal_layerorgroupref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_layerorgroupref().data(), static_cast<int>(this->_internal_layerorgroupref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StackupLayer.layerOrGroupRef");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_layerorgroupref(), target);
  }

  // .SpecRef spec_ref = 5;
  if (this->_internal_has_spec_ref()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::spec_ref(this),
        _Internal::spec_ref(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StackupLayer)
  return target;
}

size_t StackupLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StackupLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string layerOrGroupRef = 4;
  if (!this->_internal_layerorgroupref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_layerorgroupref());
  }

  // .SpecRef spec_ref = 5;
  if (this->_internal_has_spec_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_ref_);
  }

  // double toMinus = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tominus = this->_internal_tominus();
  uint64_t raw_tominus;
  memcpy(&raw_tominus, &tmp_tominus, sizeof(tmp_tominus));
  if (raw_tominus != 0) {
    total_size += 1 + 8;
  }

  // double toPlus = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_toplus = this->_internal_toplus();
  uint64_t raw_toplus;
  memcpy(&raw_toplus, &tmp_toplus, sizeof(tmp_toplus));
  if (raw_toplus != 0) {
    total_size += 1 + 8;
  }

  // int32 sequence = 3;
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StackupLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StackupLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StackupLayer::GetClassData() const { return &_class_data_; }


void StackupLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StackupLayer*>(&to_msg);
  auto& from = static_cast<const StackupLayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StackupLayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_layerorgroupref().empty()) {
    _this->_internal_set_layerorgroupref(from._internal_layerorgroupref());
  }
  if (from._internal_has_spec_ref()) {
    _this->_internal_mutable_spec_ref()->::SpecRef::MergeFrom(
        from._internal_spec_ref());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tominus = from._internal_tominus();
  uint64_t raw_tominus;
  memcpy(&raw_tominus, &tmp_tominus, sizeof(tmp_tominus));
  if (raw_tominus != 0) {
    _this->_internal_set_tominus(from._internal_tominus());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_toplus = from._internal_toplus();
  uint64_t raw_toplus;
  memcpy(&raw_toplus, &tmp_toplus, sizeof(tmp_toplus));
  if (raw_toplus != 0) {
    _this->_internal_set_toplus(from._internal_toplus());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StackupLayer::CopyFrom(const StackupLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StackupLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackupLayer::IsInitialized() const {
  return true;
}

void StackupLayer::InternalSwap(StackupLayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.layerorgroupref_, lhs_arena,
      &other->_impl_.layerorgroupref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StackupLayer, _impl_.sequence_)
      + sizeof(StackupLayer::_impl_.sequence_)
      - PROTOBUF_FIELD_OFFSET(StackupLayer, _impl_.spec_ref_)>(
          reinterpret_cast<char*>(&_impl_.spec_ref_),
          reinterpret_cast<char*>(&other->_impl_.spec_ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StackupLayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[11]);
}

// ===================================================================

class StackupGroup::_Internal {
 public:
};

StackupGroup::StackupGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StackupGroup)
}
StackupGroup::StackupGroup(const StackupGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StackupGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stackup_layer_){from._impl_.stackup_layer_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tominus_){}
    , decltype(_impl_.toplus_){}
    , decltype(_impl_.overalltickness_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tominus_, &from._impl_.tominus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.overalltickness_) -
    reinterpret_cast<char*>(&_impl_.tominus_)) + sizeof(_impl_.overalltickness_));
  // @@protoc_insertion_point(copy_constructor:StackupGroup)
}

inline void StackupGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stackup_layer_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tominus_){0}
    , decltype(_impl_.toplus_){0}
    , decltype(_impl_.overalltickness_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StackupGroup::~StackupGroup() {
  // @@protoc_insertion_point(destructor:StackupGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StackupGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stackup_layer_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void StackupGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StackupGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:StackupGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stackup_layer_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.tominus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.overalltickness_) -
      reinterpret_cast<char*>(&_impl_.tominus_)) + sizeof(_impl_.overalltickness_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StackupGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StackupGroup.name"));
        } else
          goto handle_unusual;
        continue;
      // double toMinus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.tominus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double toPlus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.toplus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double overallTickness = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.overalltickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .StackupLayer stackup_layer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stackup_layer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StackupGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StackupGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StackupGroup.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double toMinus = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tominus = this->_internal_tominus();
  uint64_t raw_tominus;
  memcpy(&raw_tominus, &tmp_tominus, sizeof(tmp_tominus));
  if (raw_tominus != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_tominus(), target);
  }

  // double toPlus = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_toplus = this->_internal_toplus();
  uint64_t raw_toplus;
  memcpy(&raw_toplus, &tmp_toplus, sizeof(tmp_toplus));
  if (raw_toplus != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_toplus(), target);
  }

  // double overallTickness = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_overalltickness = this->_internal_overalltickness();
  uint64_t raw_overalltickness;
  memcpy(&raw_overalltickness, &tmp_overalltickness, sizeof(tmp_overalltickness));
  if (raw_overalltickness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_overalltickness(), target);
  }

  // repeated .StackupLayer stackup_layer = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stackup_layer_size()); i < n; i++) {
    const auto& repfield = this->_internal_stackup_layer(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StackupGroup)
  return target;
}

size_t StackupGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StackupGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StackupLayer stackup_layer = 5;
  total_size += 1UL * this->_internal_stackup_layer_size();
  for (const auto& msg : this->_impl_.stackup_layer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double toMinus = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tominus = this->_internal_tominus();
  uint64_t raw_tominus;
  memcpy(&raw_tominus, &tmp_tominus, sizeof(tmp_tominus));
  if (raw_tominus != 0) {
    total_size += 1 + 8;
  }

  // double toPlus = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_toplus = this->_internal_toplus();
  uint64_t raw_toplus;
  memcpy(&raw_toplus, &tmp_toplus, sizeof(tmp_toplus));
  if (raw_toplus != 0) {
    total_size += 1 + 8;
  }

  // double overallTickness = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_overalltickness = this->_internal_overalltickness();
  uint64_t raw_overalltickness;
  memcpy(&raw_overalltickness, &tmp_overalltickness, sizeof(tmp_overalltickness));
  if (raw_overalltickness != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StackupGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StackupGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StackupGroup::GetClassData() const { return &_class_data_; }


void StackupGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StackupGroup*>(&to_msg);
  auto& from = static_cast<const StackupGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StackupGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stackup_layer_.MergeFrom(from._impl_.stackup_layer_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tominus = from._internal_tominus();
  uint64_t raw_tominus;
  memcpy(&raw_tominus, &tmp_tominus, sizeof(tmp_tominus));
  if (raw_tominus != 0) {
    _this->_internal_set_tominus(from._internal_tominus());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_toplus = from._internal_toplus();
  uint64_t raw_toplus;
  memcpy(&raw_toplus, &tmp_toplus, sizeof(tmp_toplus));
  if (raw_toplus != 0) {
    _this->_internal_set_toplus(from._internal_toplus());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_overalltickness = from._internal_overalltickness();
  uint64_t raw_overalltickness;
  memcpy(&raw_overalltickness, &tmp_overalltickness, sizeof(tmp_overalltickness));
  if (raw_overalltickness != 0) {
    _this->_internal_set_overalltickness(from._internal_overalltickness());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StackupGroup::CopyFrom(const StackupGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StackupGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackupGroup::IsInitialized() const {
  return true;
}

void StackupGroup::InternalSwap(StackupGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stackup_layer_.InternalSwap(&other->_impl_.stackup_layer_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StackupGroup, _impl_.overalltickness_)
      + sizeof(StackupGroup::_impl_.overalltickness_)
      - PROTOBUF_FIELD_OFFSET(StackupGroup, _impl_.tominus_)>(
          reinterpret_cast<char*>(&_impl_.tominus_),
          reinterpret_cast<char*>(&other->_impl_.tominus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StackupGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[12]);
}

// ===================================================================

class Stackup::_Internal {
 public:
  static const ::StackupGroup& stack_group(const Stackup* msg);
};

const ::StackupGroup&
Stackup::_Internal::stack_group(const Stackup* msg) {
  return *msg->_impl_.stack_group_;
}
Stackup::Stackup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Stackup)
}
Stackup::Stackup(const Stackup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Stackup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.wheremeasured_){}
    , decltype(_impl_.stack_group_){nullptr}
    , decltype(_impl_.tominus_){}
    , decltype(_impl_.toplus_){}
    , decltype(_impl_.overalltickness_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.wheremeasured_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wheremeasured_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wheremeasured().empty()) {
    _this->_impl_.wheremeasured_.Set(from._internal_wheremeasured(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stack_group()) {
    _this->_impl_.stack_group_ = new ::StackupGroup(*from._impl_.stack_group_);
  }
  ::memcpy(&_impl_.tominus_, &from._impl_.tominus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.overalltickness_) -
    reinterpret_cast<char*>(&_impl_.tominus_)) + sizeof(_impl_.overalltickness_));
  // @@protoc_insertion_point(copy_constructor:Stackup)
}

inline void Stackup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.wheremeasured_){}
    , decltype(_impl_.stack_group_){nullptr}
    , decltype(_impl_.tominus_){0}
    , decltype(_impl_.toplus_){0}
    , decltype(_impl_.overalltickness_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.wheremeasured_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wheremeasured_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Stackup::~Stackup() {
  // @@protoc_insertion_point(destructor:Stackup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stackup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.wheremeasured_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stack_group_;
}

void Stackup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stackup::Clear() {
// @@protoc_insertion_point(message_clear_start:Stackup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.wheremeasured_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.stack_group_ != nullptr) {
    delete _impl_.stack_group_;
  }
  _impl_.stack_group_ = nullptr;
  ::memset(&_impl_.tominus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.overalltickness_) -
      reinterpret_cast<char*>(&_impl_.tominus_)) + sizeof(_impl_.overalltickness_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stackup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Stackup.name"));
        } else
          goto handle_unusual;
        continue;
      // string whereMeasured = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_wheremeasured();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Stackup.whereMeasured"));
        } else
          goto handle_unusual;
        continue;
      // double toMinus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.tominus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double toPlus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.toplus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double overallTickness = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.overalltickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .StackupGroup stack_group = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stack_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stackup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Stackup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Stackup.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string whereMeasured = 2;
  if (!this->_internal_wheremeasured().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wheremeasured().data(), static_cast<int>(this->_internal_wheremeasured().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Stackup.whereMeasured");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_wheremeasured(), target);
  }

  // double toMinus = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tominus = this->_internal_tominus();
  uint64_t raw_tominus;
  memcpy(&raw_tominus, &tmp_tominus, sizeof(tmp_tominus));
  if (raw_tominus != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_tominus(), target);
  }

  // double toPlus = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_toplus = this->_internal_toplus();
  uint64_t raw_toplus;
  memcpy(&raw_toplus, &tmp_toplus, sizeof(tmp_toplus));
  if (raw_toplus != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_toplus(), target);
  }

  // double overallTickness = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_overalltickness = this->_internal_overalltickness();
  uint64_t raw_overalltickness;
  memcpy(&raw_overalltickness, &tmp_overalltickness, sizeof(tmp_overalltickness));
  if (raw_overalltickness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_overalltickness(), target);
  }

  // .StackupGroup stack_group = 6;
  if (this->_internal_has_stack_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::stack_group(this),
        _Internal::stack_group(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Stackup)
  return target;
}

size_t Stackup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Stackup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string whereMeasured = 2;
  if (!this->_internal_wheremeasured().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wheremeasured());
  }

  // .StackupGroup stack_group = 6;
  if (this->_internal_has_stack_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stack_group_);
  }

  // double toMinus = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tominus = this->_internal_tominus();
  uint64_t raw_tominus;
  memcpy(&raw_tominus, &tmp_tominus, sizeof(tmp_tominus));
  if (raw_tominus != 0) {
    total_size += 1 + 8;
  }

  // double toPlus = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_toplus = this->_internal_toplus();
  uint64_t raw_toplus;
  memcpy(&raw_toplus, &tmp_toplus, sizeof(tmp_toplus));
  if (raw_toplus != 0) {
    total_size += 1 + 8;
  }

  // double overallTickness = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_overalltickness = this->_internal_overalltickness();
  uint64_t raw_overalltickness;
  memcpy(&raw_overalltickness, &tmp_overalltickness, sizeof(tmp_overalltickness));
  if (raw_overalltickness != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stackup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Stackup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stackup::GetClassData() const { return &_class_data_; }


void Stackup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Stackup*>(&to_msg);
  auto& from = static_cast<const Stackup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Stackup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_wheremeasured().empty()) {
    _this->_internal_set_wheremeasured(from._internal_wheremeasured());
  }
  if (from._internal_has_stack_group()) {
    _this->_internal_mutable_stack_group()->::StackupGroup::MergeFrom(
        from._internal_stack_group());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tominus = from._internal_tominus();
  uint64_t raw_tominus;
  memcpy(&raw_tominus, &tmp_tominus, sizeof(tmp_tominus));
  if (raw_tominus != 0) {
    _this->_internal_set_tominus(from._internal_tominus());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_toplus = from._internal_toplus();
  uint64_t raw_toplus;
  memcpy(&raw_toplus, &tmp_toplus, sizeof(tmp_toplus));
  if (raw_toplus != 0) {
    _this->_internal_set_toplus(from._internal_toplus());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_overalltickness = from._internal_overalltickness();
  uint64_t raw_overalltickness;
  memcpy(&raw_overalltickness, &tmp_overalltickness, sizeof(tmp_overalltickness));
  if (raw_overalltickness != 0) {
    _this->_internal_set_overalltickness(from._internal_overalltickness());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stackup::CopyFrom(const Stackup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Stackup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stackup::IsInitialized() const {
  return true;
}

void Stackup::InternalSwap(Stackup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.wheremeasured_, lhs_arena,
      &other->_impl_.wheremeasured_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stackup, _impl_.overalltickness_)
      + sizeof(Stackup::_impl_.overalltickness_)
      - PROTOBUF_FIELD_OFFSET(Stackup, _impl_.stack_group_)>(
          reinterpret_cast<char*>(&_impl_.stack_group_),
          reinterpret_cast<char*>(&other->_impl_.stack_group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stackup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[13]);
}

// ===================================================================

class CadData::_Internal {
 public:
  static const ::Stackup& stack_up(const CadData* msg);
};

const ::Stackup&
CadData::_Internal::stack_up(const CadData* msg) {
  return *msg->_impl_.stack_up_;
}
CadData::CadData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CadData)
}
CadData::CadData(const CadData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CadData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.layer_){from._impl_.layer_}
    , decltype(_impl_.stack_up_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stack_up()) {
    _this->_impl_.stack_up_ = new ::Stackup(*from._impl_.stack_up_);
  }
  // @@protoc_insertion_point(copy_constructor:CadData)
}

inline void CadData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.layer_){arena}
    , decltype(_impl_.stack_up_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CadData::~CadData() {
  // @@protoc_insertion_point(destructor:CadData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CadData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layer_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.stack_up_;
}

void CadData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CadData::Clear() {
// @@protoc_insertion_point(message_clear_start:CadData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layer_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.stack_up_ != nullptr) {
    delete _impl_.stack_up_;
  }
  _impl_.stack_up_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CadData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Layer layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Stackup stack_up = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stack_up(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CadData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CadData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Layer layer = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layer_size()); i < n; i++) {
    const auto& repfield = this->_internal_layer(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .Stackup stack_up = 2;
  if (this->_internal_has_stack_up()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stack_up(this),
        _Internal::stack_up(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CadData)
  return target;
}

size_t CadData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CadData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Layer layer = 1;
  total_size += 1UL * this->_internal_layer_size();
  for (const auto& msg : this->_impl_.layer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Stackup stack_up = 2;
  if (this->_internal_has_stack_up()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stack_up_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CadData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CadData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CadData::GetClassData() const { return &_class_data_; }


void CadData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CadData*>(&to_msg);
  auto& from = static_cast<const CadData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CadData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.layer_.MergeFrom(from._impl_.layer_);
  if (from._internal_has_stack_up()) {
    _this->_internal_mutable_stack_up()->::Stackup::MergeFrom(
        from._internal_stack_up());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CadData::CopyFrom(const CadData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CadData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CadData::IsInitialized() const {
  return true;
}

void CadData::InternalSwap(CadData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.layer_.InternalSwap(&other->_impl_.layer_);
  swap(_impl_.stack_up_, other->_impl_.stack_up_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CadData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[14]);
}

// ===================================================================

class Ecad::_Internal {
 public:
  static const ::CadHeader& cad_header(const Ecad* msg);
  static const ::CadData& cad_data(const Ecad* msg);
};

const ::CadHeader&
Ecad::_Internal::cad_header(const Ecad* msg) {
  return *msg->_impl_.cad_header_;
}
const ::CadData&
Ecad::_Internal::cad_data(const Ecad* msg) {
  return *msg->_impl_.cad_data_;
}
Ecad::Ecad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Ecad)
}
Ecad::Ecad(const Ecad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ecad* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.cad_header_){nullptr}
    , decltype(_impl_.cad_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_cad_header()) {
    _this->_impl_.cad_header_ = new ::CadHeader(*from._impl_.cad_header_);
  }
  if (from._internal_has_cad_data()) {
    _this->_impl_.cad_data_ = new ::CadData(*from._impl_.cad_data_);
  }
  // @@protoc_insertion_point(copy_constructor:Ecad)
}

inline void Ecad::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.cad_header_){nullptr}
    , decltype(_impl_.cad_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ecad::~Ecad() {
  // @@protoc_insertion_point(destructor:Ecad)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ecad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cad_header_;
  if (this != internal_default_instance()) delete _impl_.cad_data_;
}

void Ecad::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ecad::Clear() {
// @@protoc_insertion_point(message_clear_start:Ecad)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.cad_header_ != nullptr) {
    delete _impl_.cad_header_;
  }
  _impl_.cad_header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cad_data_ != nullptr) {
    delete _impl_.cad_data_;
  }
  _impl_.cad_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ecad::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Ecad.name"));
        } else
          goto handle_unusual;
        continue;
      // .CadHeader cad_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cad_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CadData cad_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cad_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ecad::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ecad)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Ecad.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .CadHeader cad_header = 2;
  if (this->_internal_has_cad_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cad_header(this),
        _Internal::cad_header(this).GetCachedSize(), target, stream);
  }

  // .CadData cad_data = 3;
  if (this->_internal_has_cad_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cad_data(this),
        _Internal::cad_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ecad)
  return target;
}

size_t Ecad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ecad)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .CadHeader cad_header = 2;
  if (this->_internal_has_cad_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cad_header_);
  }

  // .CadData cad_data = 3;
  if (this->_internal_has_cad_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cad_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ecad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ecad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ecad::GetClassData() const { return &_class_data_; }


void Ecad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ecad*>(&to_msg);
  auto& from = static_cast<const Ecad&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Ecad)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_cad_header()) {
    _this->_internal_mutable_cad_header()->::CadHeader::MergeFrom(
        from._internal_cad_header());
  }
  if (from._internal_has_cad_data()) {
    _this->_internal_mutable_cad_data()->::CadData::MergeFrom(
        from._internal_cad_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ecad::CopyFrom(const Ecad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ecad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ecad::IsInitialized() const {
  return true;
}

void Ecad::InternalSwap(Ecad* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ecad, _impl_.cad_data_)
      + sizeof(Ecad::_impl_.cad_data_)
      - PROTOBUF_FIELD_OFFSET(Ecad, _impl_.cad_header_)>(
          reinterpret_cast<char*>(&_impl_.cad_header_),
          reinterpret_cast<char*>(&other->_impl_.cad_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ecad::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[15]);
}

// ===================================================================

class root::_Internal {
 public:
  static const ::Content& content(const root* msg);
  static const ::Ecad& ecad(const root* msg);
};

const ::Content&
root::_Internal::content(const root* msg) {
  return *msg->_impl_.content_;
}
const ::Ecad&
root::_Internal::ecad(const root* msg) {
  return *msg->_impl_.ecad_;
}
root::root(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:root)
}
root::root(const root& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  root* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){nullptr}
    , decltype(_impl_.ecad_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_content()) {
    _this->_impl_.content_ = new ::Content(*from._impl_.content_);
  }
  if (from._internal_has_ecad()) {
    _this->_impl_.ecad_ = new ::Ecad(*from._impl_.ecad_);
  }
  // @@protoc_insertion_point(copy_constructor:root)
}

inline void root::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){nullptr}
    , decltype(_impl_.ecad_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

root::~root() {
  // @@protoc_insertion_point(destructor:root)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void root::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.content_;
  if (this != internal_default_instance()) delete _impl_.ecad_;
}

void root::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void root::Clear() {
// @@protoc_insertion_point(message_clear_start:root)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.content_ != nullptr) {
    delete _impl_.content_;
  }
  _impl_.content_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ecad_ != nullptr) {
    delete _impl_.ecad_;
  }
  _impl_.ecad_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* root::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Content content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Ecad ecad = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ecad(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* root::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:root)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Content content = 1;
  if (this->_internal_has_content()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::content(this),
        _Internal::content(this).GetCachedSize(), target, stream);
  }

  // .Ecad ecad = 2;
  if (this->_internal_has_ecad()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ecad(this),
        _Internal::ecad(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:root)
  return target;
}

size_t root::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:root)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Content content = 1;
  if (this->_internal_has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.content_);
  }

  // .Ecad ecad = 2;
  if (this->_internal_has_ecad()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ecad_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData root::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    root::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*root::GetClassData() const { return &_class_data_; }


void root::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<root*>(&to_msg);
  auto& from = static_cast<const root&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:root)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_content()) {
    _this->_internal_mutable_content()->::Content::MergeFrom(
        from._internal_content());
  }
  if (from._internal_has_ecad()) {
    _this->_internal_mutable_ecad()->::Ecad::MergeFrom(
        from._internal_ecad());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void root::CopyFrom(const root& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool root::IsInitialized() const {
  return true;
}

void root::InternalSwap(root* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(root, _impl_.ecad_)
      + sizeof(root::_impl_.ecad_)
      - PROTOBUF_FIELD_OFFSET(root, _impl_.content_)>(
          reinterpret_cast<char*>(&_impl_.content_),
          reinterpret_cast<char*>(&other->_impl_.content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata root::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LayerRef*
Arena::CreateMaybeMessage< ::LayerRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LayerRef >(arena);
}
template<> PROTOBUF_NOINLINE ::Color*
Arena::CreateMaybeMessage< ::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::EntryColor*
Arena::CreateMaybeMessage< ::EntryColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EntryColor >(arena);
}
template<> PROTOBUF_NOINLINE ::DictionaryColor*
Arena::CreateMaybeMessage< ::DictionaryColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DictionaryColor >(arena);
}
template<> PROTOBUF_NOINLINE ::Content*
Arena::CreateMaybeMessage< ::Content >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Content >(arena);
}
template<> PROTOBUF_NOINLINE ::Property*
Arena::CreateMaybeMessage< ::Property >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Property >(arena);
}
template<> PROTOBUF_NOINLINE ::General*
Arena::CreateMaybeMessage< ::General >(Arena* arena) {
  return Arena::CreateMessageInternal< ::General >(arena);
}
template<> PROTOBUF_NOINLINE ::Spec*
Arena::CreateMaybeMessage< ::Spec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Spec >(arena);
}
template<> PROTOBUF_NOINLINE ::CadHeader*
Arena::CreateMaybeMessage< ::CadHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CadHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::Layer*
Arena::CreateMaybeMessage< ::Layer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Layer >(arena);
}
template<> PROTOBUF_NOINLINE ::SpecRef*
Arena::CreateMaybeMessage< ::SpecRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpecRef >(arena);
}
template<> PROTOBUF_NOINLINE ::StackupLayer*
Arena::CreateMaybeMessage< ::StackupLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StackupLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::StackupGroup*
Arena::CreateMaybeMessage< ::StackupGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StackupGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::Stackup*
Arena::CreateMaybeMessage< ::Stackup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Stackup >(arena);
}
template<> PROTOBUF_NOINLINE ::CadData*
Arena::CreateMaybeMessage< ::CadData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CadData >(arena);
}
template<> PROTOBUF_NOINLINE ::Ecad*
Arena::CreateMaybeMessage< ::Ecad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Ecad >(arena);
}
template<> PROTOBUF_NOINLINE ::root*
Arena::CreateMaybeMessage< ::root >(Arena* arena) {
  return Arena::CreateMessageInternal< ::root >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
