// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gds_tech.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gds_5ftech_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gds_5ftech_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gds_5ftech_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gds_5ftech_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gds_5ftech_2eproto;
class GdsTech;
struct GdsTechDefaultTypeInternal;
extern GdsTechDefaultTypeInternal _GdsTech_default_instance_;
class Package;
struct PackageDefaultTypeInternal;
extern PackageDefaultTypeInternal _Package_default_instance_;
class Title;
struct TitleDefaultTypeInternal;
extern TitleDefaultTypeInternal _Title_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GdsTech* Arena::CreateMaybeMessage<::GdsTech>(Arena*);
template<> ::Package* Arena::CreateMaybeMessage<::Package>(Arena*);
template<> ::Title* Arena::CreateMaybeMessage<::Title>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Title final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Title) */ {
 public:
  inline Title() : Title(nullptr) {}
  ~Title() override;
  explicit PROTOBUF_CONSTEXPR Title(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Title(const Title& from);
  Title(Title&& from) noexcept
    : Title() {
    *this = ::std::move(from);
  }

  inline Title& operator=(const Title& from) {
    CopyFrom(from);
    return *this;
  }
  inline Title& operator=(Title&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Title& default_instance() {
    return *internal_default_instance();
  }
  static inline const Title* internal_default_instance() {
    return reinterpret_cast<const Title*>(
               &_Title_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Title& a, Title& b) {
    a.Swap(&b);
  }
  inline void Swap(Title* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Title* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Title* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Title>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Title& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Title& from) {
    Title::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Title* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Title";
  }
  protected:
  explicit Title(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:Title)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gds_5ftech_2eproto;
};
// -------------------------------------------------------------------

class Package final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Package) */ {
 public:
  inline Package() : Package(nullptr) {}
  ~Package() override;
  explicit PROTOBUF_CONSTEXPR Package(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Package(const Package& from);
  Package(Package&& from) noexcept
    : Package() {
    *this = ::std::move(from);
  }

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  inline Package& operator=(Package&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Package& default_instance() {
    return *internal_default_instance();
  }
  static inline const Package* internal_default_instance() {
    return reinterpret_cast<const Package*>(
               &_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Package& a, Package& b) {
    a.Swap(&b);
  }
  inline void Swap(Package* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Package* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Package* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Package>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Package& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Package& from) {
    Package::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Package* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Package";
  }
  protected:
  explicit Package(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlipchipFieldNumber = 1,
  };
  // string flipchip = 1;
  void clear_flipchip();
  const std::string& flipchip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flipchip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flipchip();
  PROTOBUF_NODISCARD std::string* release_flipchip();
  void set_allocated_flipchip(std::string* flipchip);
  private:
  const std::string& _internal_flipchip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flipchip(const std::string& value);
  std::string* _internal_mutable_flipchip();
  public:

  // @@protoc_insertion_point(class_scope:Package)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flipchip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gds_5ftech_2eproto;
};
// -------------------------------------------------------------------

class GdsTech final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GdsTech) */ {
 public:
  inline GdsTech() : GdsTech(nullptr) {}
  ~GdsTech() override;
  explicit PROTOBUF_CONSTEXPR GdsTech(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GdsTech(const GdsTech& from);
  GdsTech(GdsTech&& from) noexcept
    : GdsTech() {
    *this = ::std::move(from);
  }

  inline GdsTech& operator=(const GdsTech& from) {
    CopyFrom(from);
    return *this;
  }
  inline GdsTech& operator=(GdsTech&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GdsTech& default_instance() {
    return *internal_default_instance();
  }
  static inline const GdsTech* internal_default_instance() {
    return reinterpret_cast<const GdsTech*>(
               &_GdsTech_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GdsTech& a, GdsTech& b) {
    a.Swap(&b);
  }
  inline void Swap(GdsTech* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GdsTech* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GdsTech* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GdsTech>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GdsTech& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GdsTech& from) {
    GdsTech::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GdsTech* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GdsTech";
  }
  protected:
  explicit GdsTech(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kPackageFieldNumber = 2,
  };
  // .Title title = 1;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const ::Title& title() const;
  PROTOBUF_NODISCARD ::Title* release_title();
  ::Title* mutable_title();
  void set_allocated_title(::Title* title);
  private:
  const ::Title& _internal_title() const;
  ::Title* _internal_mutable_title();
  public:
  void unsafe_arena_set_allocated_title(
      ::Title* title);
  ::Title* unsafe_arena_release_title();

  // .Package package = 2;
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  const ::Package& package() const;
  PROTOBUF_NODISCARD ::Package* release_package();
  ::Package* mutable_package();
  void set_allocated_package(::Package* package);
  private:
  const ::Package& _internal_package() const;
  ::Package* _internal_mutable_package();
  public:
  void unsafe_arena_set_allocated_package(
      ::Package* package);
  ::Package* unsafe_arena_release_package();

  // @@protoc_insertion_point(class_scope:GdsTech)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Title* title_;
    ::Package* package_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gds_5ftech_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Title

// string version = 1;
inline void Title::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& Title::version() const {
  // @@protoc_insertion_point(field_get:Title.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Title::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Title.version)
}
inline std::string* Title::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:Title.version)
  return _s;
}
inline const std::string& Title::_internal_version() const {
  return _impl_.version_.Get();
}
inline void Title::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* Title::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* Title::release_version() {
  // @@protoc_insertion_point(field_release:Title.version)
  return _impl_.version_.Release();
}
inline void Title::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Title.version)
}

// string description = 2;
inline void Title::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Title::description() const {
  // @@protoc_insertion_point(field_get:Title.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Title::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Title.description)
}
inline std::string* Title::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:Title.description)
  return _s;
}
inline const std::string& Title::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Title::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Title::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Title::release_description() {
  // @@protoc_insertion_point(field_release:Title.description)
  return _impl_.description_.Release();
}
inline void Title::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Title.description)
}

// -------------------------------------------------------------------

// Package

// string flipchip = 1;
inline void Package::clear_flipchip() {
  _impl_.flipchip_.ClearToEmpty();
}
inline const std::string& Package::flipchip() const {
  // @@protoc_insertion_point(field_get:Package.flipchip)
  return _internal_flipchip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Package::set_flipchip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.flipchip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Package.flipchip)
}
inline std::string* Package::mutable_flipchip() {
  std::string* _s = _internal_mutable_flipchip();
  // @@protoc_insertion_point(field_mutable:Package.flipchip)
  return _s;
}
inline const std::string& Package::_internal_flipchip() const {
  return _impl_.flipchip_.Get();
}
inline void Package::_internal_set_flipchip(const std::string& value) {
  
  _impl_.flipchip_.Set(value, GetArenaForAllocation());
}
inline std::string* Package::_internal_mutable_flipchip() {
  
  return _impl_.flipchip_.Mutable(GetArenaForAllocation());
}
inline std::string* Package::release_flipchip() {
  // @@protoc_insertion_point(field_release:Package.flipchip)
  return _impl_.flipchip_.Release();
}
inline void Package::set_allocated_flipchip(std::string* flipchip) {
  if (flipchip != nullptr) {
    
  } else {
    
  }
  _impl_.flipchip_.SetAllocated(flipchip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.flipchip_.IsDefault()) {
    _impl_.flipchip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Package.flipchip)
}

// -------------------------------------------------------------------

// GdsTech

// .Title title = 1;
inline bool GdsTech::_internal_has_title() const {
  return this != internal_default_instance() && _impl_.title_ != nullptr;
}
inline bool GdsTech::has_title() const {
  return _internal_has_title();
}
inline void GdsTech::clear_title() {
  if (GetArenaForAllocation() == nullptr && _impl_.title_ != nullptr) {
    delete _impl_.title_;
  }
  _impl_.title_ = nullptr;
}
inline const ::Title& GdsTech::_internal_title() const {
  const ::Title* p = _impl_.title_;
  return p != nullptr ? *p : reinterpret_cast<const ::Title&>(
      ::_Title_default_instance_);
}
inline const ::Title& GdsTech::title() const {
  // @@protoc_insertion_point(field_get:GdsTech.title)
  return _internal_title();
}
inline void GdsTech::unsafe_arena_set_allocated_title(
    ::Title* title) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.title_);
  }
  _impl_.title_ = title;
  if (title) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GdsTech.title)
}
inline ::Title* GdsTech::release_title() {
  
  ::Title* temp = _impl_.title_;
  _impl_.title_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Title* GdsTech::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_release:GdsTech.title)
  
  ::Title* temp = _impl_.title_;
  _impl_.title_ = nullptr;
  return temp;
}
inline ::Title* GdsTech::_internal_mutable_title() {
  
  if (_impl_.title_ == nullptr) {
    auto* p = CreateMaybeMessage<::Title>(GetArenaForAllocation());
    _impl_.title_ = p;
  }
  return _impl_.title_;
}
inline ::Title* GdsTech::mutable_title() {
  ::Title* _msg = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:GdsTech.title)
  return _msg;
}
inline void GdsTech::set_allocated_title(::Title* title) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.title_;
  }
  if (title) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(title);
    if (message_arena != submessage_arena) {
      title = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.title_ = title;
  // @@protoc_insertion_point(field_set_allocated:GdsTech.title)
}

// .Package package = 2;
inline bool GdsTech::_internal_has_package() const {
  return this != internal_default_instance() && _impl_.package_ != nullptr;
}
inline bool GdsTech::has_package() const {
  return _internal_has_package();
}
inline void GdsTech::clear_package() {
  if (GetArenaForAllocation() == nullptr && _impl_.package_ != nullptr) {
    delete _impl_.package_;
  }
  _impl_.package_ = nullptr;
}
inline const ::Package& GdsTech::_internal_package() const {
  const ::Package* p = _impl_.package_;
  return p != nullptr ? *p : reinterpret_cast<const ::Package&>(
      ::_Package_default_instance_);
}
inline const ::Package& GdsTech::package() const {
  // @@protoc_insertion_point(field_get:GdsTech.package)
  return _internal_package();
}
inline void GdsTech::unsafe_arena_set_allocated_package(
    ::Package* package) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.package_);
  }
  _impl_.package_ = package;
  if (package) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GdsTech.package)
}
inline ::Package* GdsTech::release_package() {
  
  ::Package* temp = _impl_.package_;
  _impl_.package_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Package* GdsTech::unsafe_arena_release_package() {
  // @@protoc_insertion_point(field_release:GdsTech.package)
  
  ::Package* temp = _impl_.package_;
  _impl_.package_ = nullptr;
  return temp;
}
inline ::Package* GdsTech::_internal_mutable_package() {
  
  if (_impl_.package_ == nullptr) {
    auto* p = CreateMaybeMessage<::Package>(GetArenaForAllocation());
    _impl_.package_ = p;
  }
  return _impl_.package_;
}
inline ::Package* GdsTech::mutable_package() {
  ::Package* _msg = _internal_mutable_package();
  // @@protoc_insertion_point(field_mutable:GdsTech.package)
  return _msg;
}
inline void GdsTech::set_allocated_package(::Package* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.package_;
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(package);
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.package_ = package;
  // @@protoc_insertion_point(field_set_allocated:GdsTech.package)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gds_5ftech_2eproto
